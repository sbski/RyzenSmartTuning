<?xml version="1.0" encoding="UTF-8"?>
<!--
    AMD processor micro-architecture performance monitor events.

    Family   : 17h
    Model    : 00h-0Fh
    Flavor   : Public
    Document : Processor Programming Reference (PPR) for AMD Family 17h Model 00h-0Fh Processors
    Revision : 3.03
    Copyright (c) 2018-2019 Advanced Micro Devices, Inc.
-->
<cpu_events>
    <source unit="FP">
        <event name="FPU Pipe Assignment" abbreviation="FpuPipeAssignment" value="0">
            <mask value="7" name="Dual3: Total number multi-pipe uOps assigned to Pipe 3"/>
            <mask value="6" name="Dual2: Total number multi-pipe uOps assigned to Pipe 2"/>
            <mask value="5" name="Dual1: Total number multi-pipe uOps assigned to Pipe 1"/>
            <mask value="4" name="Dual0: Total number multi-pipe uOps assigned to Pipe 0"/>
            <mask value="3" name="Total3: Total number uOps assigned to Pipe 3"/>
            <mask value="2" name="Total2: Total number uOps assigned to Pipe 2"/>
            <mask value="1" name="Total1: Total number uOps assigned to Pipe 1"/>
            <mask value="0" name="Total0: Total number uOps assigned to Pipe 0"/>
            <description>The number of operations (uOps) and dual-pipeuOps dispatched to each of the 4 FPU execution pipelines. This event reflects how busy the FPU pipelines are and may be used for workload characterization. This includes all operations performed by x87, MMXâ„¢, and SSE instructions, including moves. Each increment represents a one-cycle dispatch event. This event is a speculative event. (See Core::X86::Pmc::Core::ExRetMmxFpInstr). Since this event includes non-numeric operations it is not suitable for measuring MFLOPs.</description>
        </event>
        <event name="FP Scheduler Empty" abbreviation="FpSchedEmpty" value="1">
            <description>This is a speculative event. The number of cycles in which the FPU scheduler is empty. Note that some Ops like FP loads bypass the scheduler. Invert this (Core::X86::Msr::PERF_CTL[Inv] == 1) to count cycles in which at least one FPU operation is present in the FPU.</description>
        </event>
        <event name="Retired x87 Floating Point Operations" abbreviation="FpRetx87FpOps" value="2">
            <mask value="2" name="DivSqrROps: Divide and square root Ops"/>
            <mask value="1" name="MulOps: Multiply Ops"/>
            <mask value="0" name="AddSubOps: Add/subtract Ops"/>
            <description>The number of x87 floating-point Ops that have retired. The number of events logged per cycle can vary from 0 to 8.</description>
        </event>
        <event name="Retired SSE/AVX Operations" abbreviation="FpRetSseAvxOps" value="3">
            <mask value="7" name="DpMultAddFLOPs: Double precision multiply-add FLOPs Multiply-add counts as 2 FLOPs."/>
            <mask value="6" name="DpDivFLOPs: Double precision divide/square root FLOPs"/>
            <mask value="5" name="DpMultFLOPs: Double precision multiply FLOPs"/>
            <mask value="4" name="DpAddSubFLOPs: Double precision add/subtract FLOPs"/>
            <mask value="3" name="SpMultAddFLOPs: Single precision multiply-add FLOPs Multiply-add counts as 2 FLOPs."/>
            <mask value="2" name="SpDivFLOPs: Single-precision divide/square root FLOPs"/>
            <mask value="1" name="SpMultFLOPs: Single-precision multiply FLOPs"/>
            <mask value="0" name="SpAddSubFLOPs: Single-precision add/subtract FLOPs"/>
            <description>This is a retire-based event. The number of retired SSE/AVX FLOPs. The number of events logged per cycle can vary from 0 to 64. This event can count above 15. See 2.1.15.3 [Large Increment per Cycle Events].</description>
        </event>
        <event name="Number of Move Elimination and Scalar Op Optimization" abbreviation="FpNumMovElimScalOp" value="4">
            <mask value="3" name="Optimized: Number of Scalar Ops optimized"/>
            <mask value="2" name="OptPotential: Number of Ops that are candidates for optimization (have Z-bit either set or pass)"/>
            <mask value="1" name="SseMovOpsElim: Number of SSE Move Ops eliminated"/>
            <mask value="0" name="SseMovOps: Number of SSE Move Ops"/>
            <description>This is a dispatch based speculative event, and is useful for measuring the effectiveness of the Move elimination and Scalar code optimization schemes.</description>
        </event>
        <event name="Retired Serializing Ops" abbreviation="FpRetiredSerOps" value="5">
            <mask value="3" name="X87CtrlRet: x87 control word mispredict traps due to mispredictions in RC or PC, or changes in mask bits"/>
            <mask value="2" name="X87BotRet: x87 bottom-executing uOps retired"/>
            <mask value="1" name="SseCtrlRet: SSE control word mispredict traps due to mispredictions in RC, FTZ or DAZ, or changes in mask bits"/>
            <mask value="0" name="SseBotRet: SSE bottom-executing uOps retired"/>
            <description>The number of serializing Ops retired.</description>
        </event>
    </source>
    <source unit="LS">
        <event name="Retired Lock Instructions" abbreviation="LsLocks" value="25">
            <description></description>
        </event>
        <event name="Retired CLFLUSH Instructions" abbreviation="LsRetClClush" value="26">
            <description>The number of retired CLFLUSH instructions. This is a non-speculative event.</description>
        </event>
        <event name="Retired CPUID Instructions" abbreviation="LsRetCpuid" value="27">
            <description>The number of CPUID instructions retired.</description>
        </event>
        <event name="LS Dispatch" abbreviation="LsDispatch" value="29">
            <mask value="2" name="LdStDispatch: Load-op-Stores"/>
            <mask value="1" name="StoreDispatch"/>
            <mask value="0" name="LdDispatch"/>
            <description>Counts the number of operations dispatched to the LS unit. Unit Masks ADDed.</description>
        </event>
        <event name="SMIs Received" abbreviation="LsSmiRx" value="2B">
            <description>Counts the number of SMIs received.</description>
        </event>
        <event name="Interrupts Taken" abbreviation="LsIntTaken" value="2C">
            <description>Counts the number of interrupts taken.</description>
        </event>
        <event name="Store to Load Forward" abbreviation="LsSTLF" value="35">
            <description>Number of STLF hits.</description>
        </event>
        <event name="Store Commit Cancels 2" abbreviation="LsStCommitCancel2" value="37">
            <mask value="0" name="StCommitCancelWcbFull: A non-cacheable store and the non-cacheable commit buffer is full."/>
            <description></description>
        </event>
        <event name="Data Cache Accesses" abbreviation="LsDcAccesses" value="40">
            <description>The number of accesses to the data cache for load and store references. This may include certain microcode scratchpad accesses, although these are generally rare. Each increment represents an eight-byte access, although the instruction may only be accessing a portion of that. This event is a speculative event.</description>
        </event>
        <event name="DC Miss By Type" abbreviation="LsMabAlloc" value="41">
            <mask value="3" name="DcPrefetcher"/>
            <mask value="1" name="Stores"/>
            <mask value="0" name="Loads"/>
            <description></description>
        </event>
        <event name="Data Cache Refills from System" abbreviation="LsRefillsFromSys" value="43">
            <mask value="6" name="LS_MABRESP_RMT_DRAM: DRAM or IO from different die."/>
            <mask value="4" name="LS_MABRESP_RMT_CACHE: Hit in cache; Remote CCX and the address&apos;s Home Node is on a different die."/>
            <mask value="3" name="LS_MABRESP_LCL_DRAM: DRAM or IO from this thread&apos;s die."/>
            <mask value="1" name="LS_MABRESP_LCL_CACHE: Hit in cache; local CCX (not Local L2), or Remote CCX and the address&apos;s Home Node is on this thread&apos;s die."/>
            <mask value="0" name="MABRESP_LCL_L2: Local L2 hit."/>
            <description>Demand Data Cache Fills by Data Source.</description>
        </event>
        <event name="L1 DTLB Miss" abbreviation="LsL1DTlbMiss" value="45">
            <mask value="7" name="TlbReload1GL2Miss"/>
            <mask value="6" name="TlbReload2ML2Miss"/>
            <mask value="5" name="TlbReload32KL2Miss"/>
            <mask value="4" name="TlbReload4KL2Miss"/>
            <mask value="3" name="TlbReload1GL2Hit"/>
            <mask value="2" name="TlbReload2ML2Hit"/>
            <mask value="1" name="TlbReload32KL2Hit"/>
            <mask value="0" name="TlbReload4KL2Hit"/>
            <description></description>
        </event>
        <event name="Total Page Table Walks" abbreviation="LsTablewalker" value="46">
            <mask value="3" name="IcType1"/>
            <mask value="2" name="IcType0"/>
            <mask value="1" name="DcType1"/>
            <mask value="0" name="DcType0"/>
            <description></description>
        </event>
        <event name="Misaligned loads" abbreviation="LsMisalAccesses" value="47">
            <description></description>
        </event>
        <event name="Prefetch Instructions Dispatched" abbreviation="LsPrefInstrDisp" value="4B">
            <description>Software Prefetch Instructions Dispatched (Speculative).</description>
        </event>
        <event name="Ineffective Software Prefetchs" abbreviation="LsInefSwPref" value="52">
            <mask value="1" name="MabMchCnt: Software PREFETCH instruction saw a match on an already-allocated miss request buffer."/>
            <mask value="0" name="DataPipeSwPfDcHit: Software PREFETCH instruction saw a DC hit."/>
            <description>The number of software prefetches that did not fetch data outside of the processor core.</description>
        </event>
        <event name="Software Prefetch Data Cache Fills" abbreviation="LsSwPfDcFills" value="59">
            <mask value="6" name="LS_MABRESP_RMT_DRAM: DRAM or IO from different die."/>
            <mask value="4" name="LS_MABRESP_RMT_CACHE: Hit in cache; Remote CCX and the address&apos;s Home Node is on a different die."/>
            <mask value="3" name="LS_MABRESP_LCL_DRAM: DRAM or IO from this thread&apos;s die."/>
            <mask value="1" name="LS_MABRESP_LCL_CACHE: Hit in cache; local CCX (not Local L2), or Remote CCX and the address&apos;s Home Node is on this thread&apos;s die."/>
            <mask value="0" name="MABRESP_LCL_L2: Local L2 hit."/>
            <description>Software Prefetch Data Cache Fills by Data Source.</description>
        </event>
        <event name="Hardware Prefetch Data Cache Fills" abbreviation="LsHwPfDcFills" value="5A">
            <mask value="6" name="LS_MABRESP_RMT_DRAM: DRAM or IO from different die."/>
            <mask value="4" name="LS_MABRESP_RMT_CACHE: Hit in cache; Remote CCX and the address&apos;s Home Node is on a different die."/>
            <mask value="3" name="LS_MABRESP_LCL_DRAM: DRAM or IO from this thread&apos;s die."/>
            <mask value="1" name="LS_MABRESP_LCL_CACHE: Hit in cache; local CCX (not Local L2), or Remote CCX and the address&apos;s Home Node is on this thread&apos;s die."/>
            <mask value="0" name="MABRESP_LCL_L2: Local L2 hit."/>
            <description>Hardware Prefetch Data Cache Fills by Data Source.</description>
        </event>
        <event name="Table Walker Data Cache Fills by Data Source" abbreviation="LsTwDcFills" value="5B">
            <mask value="6" name="LS_MABRESP_RMT_DRAM: DRAM or IO from different die."/>
            <mask value="4" name="LS_MABRESP_RMT_CACHE: Hit in cache; Remote CCX and the address&apos;s Home Node is on a different die."/>
            <mask value="3" name="LS_MABRESP_LCL_DRAM: DRAM or IO from this thread&apos;s die."/>
            <mask value="1" name="LS_MABRESP_LCL_CACHE: Hit in cache; local CCX (not Local L2), or Remote CCX and the address&apos;s Home Node is on this thread&apos;s die."/>
            <mask value="0" name="MABRESP_LCL_L2: Local L2 hit."/>
            <description></description>
        </event>
        <event name="Cycles not in Halt" abbreviation="LsNotHaltedCyc" value="76">
            <description></description>
        </event>
        <event name="All TLB Flushes" abbreviation="LsTlbFlush" value="78">
            <description></description>
        </event>
    </source>
    <source unit="IC">
        <event name="Total Number of 32B Instruction Fetches" abbreviation="IcFw32" value="80">
            <description>The number of 32B  instruction cache fetches issued to the instruction decoder. </description>
        </event>
        <event name="Number of 32B Instruction Fetches that Miss in Instruction Cache" abbreviation="IcFw32Miss" value="81">
            <description>The number of 32B fetches that tried to read the L1 instruction cache and missed.</description>
        </event>
        <event name="Instruction Cache Refills from L2" abbreviation="IcCacheFillL2" value="82">
            <description>The number of 64 byte instruction cache line was fulfilled from the L2 cache.</description>
        </event>
        <event name="Instruction Cache Refills from System" abbreviation="IcCacheFillSys" value="83">
            <description>The number of 64 byte instruction cache line fulfilled from system memory or another cache.</description>
        </event>
        <event name="L1 ITLB Miss, L2 ITLB Hit" abbreviation="BpL1TlbMissL2TlbHit" value="84">
            <description>The number of instruction fetches that miss in the L1 ITLB but hit in the L2 ITLB.</description>
        </event>
        <event name="L1 ITLB Miss, L2 ITLB Miss" abbreviation="BpL1TlbMissL2TlbMiss" value="85">
            <description>The number of instruction fetches that miss in both the L1 and L2 TLBs.</description>
        </event>
        <event name="L1 Branch Prediction Overrides Existing Prediction (speculative)" abbreviation="BpL1BTBCorrect" value="8A">
            <description></description>
        </event>
        <event name="L2 Branch Prediction Overrides Existing Prediction (speculative)" abbreviation="BpL2BTBCorrect" value="8B">
            <description></description>
        </event>
        <event name="Instruction Cache Lines Invalidated" abbreviation="IcCacheInval" value="8C">
            <mask value="1" name="L2InvalidatingProbe: IC line invalidated due to L2 invalidating probe (external or LS)."/>
            <mask value="0" name="FillInvalidated: IC line invalidated due to overwriting fill response."/>
            <description>The number of instruction cache lines invalidated. A non-SMC event is CMC (cross modifying code), either from the other thread of the core or another core.</description>
        </event>
        <event name="Dynamic Indirect Predictions" abbreviation="BpDynIndPred" value="8E">
            <description>Indirect Branch Prediction for potential multi-target branch (speculative)</description>
        </event>
        <event name="Decoder Overrides Existing Branch Prediction (speculative)" abbreviation="BpDeReDirect" value="91">
            <description></description>
        </event>
        <event name="ITLB Reloads" abbreviation="BpTlbRel" value="99">
            <description>The number of ITLB reload requests.</description>
        </event>
        <event name="Switches between instruction fetch and op cache fetch modes" abbreviation="IcOcModeSwitch" value="28A">
            <mask value="1" name="OcIcModeSwitch: OC to IC mode switch"/>
            <mask value="0" name="IcOcModeSwitch: IC to OC mode switch"/>
            <description>See Core::X86::Pmc::Core::DeDisUopsFromDecoder (PMCx0AA) for number of ops dispatched from OC.</description>
        </event>
    </source>
    <source unit="DE">
        <event name="UOps Dispatched From Decoder" abbreviation="DeDisUopsFromDecoder" value="AA">
            <mask value="1" name="OpCacheDispatched: Count of dispatched Ops from OpCache"/>
            <mask value="0" name="DecoderDispatched: Count of dispatched Ops from Decoder"/>
            <description>Ops dispatched from either the decoders, OpCache or both.</description>
        </event>
        <event name="Dispatch Resource Stall Cycles 1" abbreviation="DeDisDispatchTokenStalls1" value="AE">
            <mask value="7" name="FPMiscRsrcStall: FP Miscellaneous  resource unavailable Applies to the recovery of mispredicts with FP ops."/>
            <mask value="6" name="FPSchRsrcStall: FP scheduler resource stall Applies to ops that use the FP scheduler. "/>
            <mask value="5" name="FpRegFileRsrcStall: floating point register file resource stall Applies to all FP ops that have a destination register."/>
            <mask value="4" name="TakenBrnchBufferRsrc: taken branch buffer resource stall"/>
            <mask value="3" name="IntSchedulerMiscRsrcStall: Integer Scheduler miscellaneous resource stall"/>
            <mask value="2" name="StoreQueueRsrcStall: Store Queue resource stall Applies to all ops with store semantics. "/>
            <mask value="1" name="LoadQueueRsrcStall: Load Queue resource stall Applies to all ops with load semantics. "/>
            <mask value="0" name="IntPhyRegFileRsrcStall: Integer Physical Register File resource stall Integer Physical Register File, applies to all ops that have an integer destination register."/>
            <description>Cycles where a dispatch group is valid but does not get dispatched due to a Token Stall.</description>
        </event>
        <event name="Dispatch Resource Stall Cycles 0" abbreviation="DeDisDispatchTokenStalls0" value="AF">
            <mask value="6" name="RetireRsrcStall: RETIRE Resource unavailable"/>
            <mask value="5" name="AGSQRsrcStall: AGSQ Resources unavailable"/>
            <mask value="4" name="ALURsrcStall: ALU Resources total unavailable"/>
            <mask value="3" name="ALSQ3_0_RsrcStall"/>
            <mask value="2" name="ALSQ3RsrcStall: ALSQ 3 Resources unavailable"/>
            <mask value="1" name="ALSQ2RsrcStall: ALSQ 2 Resources unavailable"/>
            <mask value="0" name="ALSQ1RsrcStall: ALSQ 1 Resources unavailable"/>
            <description>Cycles where a dispatch group is valid but does not get dispatched due to a token stall.</description>
        </event>
    </source>
    <source unit="EX">
        <event name="Retired Instructions" abbreviation="ExRetInstr" value="C0">
            <description></description>
        </event>
        <event name="Retired Uops" abbreviation="ExRetCops" value="C1">
            <description>The number of micro-ops retired. This count includes all processor activity (instructions, exceptions, interrupts, microcode assists, etc.). The number of events logged per cycle can vary from 0 to 8.</description>
        </event>
        <event name="Retired Branch Instructions" abbreviation="ExRetBrn" value="C2">
            <description>The number of branch instructions retired. This includes all types of architectural control flow changes, including exceptions and interrupts.</description>
        </event>
        <event name="Retired Branch Instructions Mispredicted" abbreviation="ExRetBrnMisp" value="C3">
            <description>The number of branch instructions retired, of any type, that were not correctly predicted. This includes those for which prediction is not attempted (far control transfers, exceptions and interrupts).</description>
        </event>
        <event name="Retired Taken Branch Instructions" abbreviation="ExRetBrnTkn" value="C4">
            <description>The number of taken branches that were retired. This includes all types of architectural control flow changes, including exceptions and interrupts.</description>
        </event>
        <event name="Retired Taken Branch Instructions Mispredicted" abbreviation="ExRetBrnTknMisp" value="C5">
            <description>The number of retired taken branch instructions that were mispredicted.</description>
        </event>
        <event name="Retired Far Control Transfers" abbreviation="ExRetBrnFar" value="C6">
            <description>The number of far control transfers retired including far call/jump/return, IRET, SYSCALL and SYSRET, plus exceptions and interrupts. Far control transfers are not subject to branch prediction.</description>
        </event>
        <event name="Retired Near Returns" abbreviation="ExRetNearRet" value="C8">
            <description>The number of near return instructions (RET or RET Iw) retired.</description>
        </event>
        <event name="Retired Near Returns Mispredicted" abbreviation="ExRetNearRetMispred" value="C9">
            <description>The number of near returns retired that were not correctly predicted by the return address predictor. Each such mispredict incurs the same penalty as a mispredicted conditional branch instruction.</description>
        </event>
        <event name="Retired Indirect Branch Instructions Mispredicted" abbreviation="ExRetBrnIndMisp" value="CA">
            <description>The number of indirect branches retired that were not correctly predicted. Each such mispredict incurs the same penalty as a mispredicted conditional branch instruction. Note that only EX mispredicts are counted.</description>
        </event>
        <event name="Retired MMX/FP Instructions" abbreviation="ExRetMmxFpInstr" value="CB">
            <mask value="2" name="SseInstr: SSE instructions (SSE, SSE2, SSE3, SSSE3, SSE4A, SSE41, SSE42, AVX)."/>
            <mask value="1" name="MmxInstr: MMXâ„¢ instructions."/>
            <mask value="0" name="X87Instr: x87 instructions"/>
            <description>The number of MMXâ„¢, SSE or x87 instructions retired. The UnitMask allows the selection of the individual classes of instructions as given in the table. Each increment represents one complete instruction. Since this event includes non-numeric instructions it is not suitable for measuring MFLOPs.</description>
        </event>
        <event name="Retired Conditional Branch Instructions" abbreviation="ExRetCond" value="D1">
            <description></description>
        </event>
        <event name="Div Cycles Busy count" abbreviation="ExDivBusy" value="D3">
            <description></description>
        </event>
        <event name="Div Op Count" abbreviation="ExDivCount" value="D4">
            <description></description>
        </event>
        <event name="Tagged IBS Ops" abbreviation="ExTaggedIbsOps" value="1CF">
            <mask value="2" name="IbsCountRollover: Number of times an op could not be tagged by IBS because of a previous tagged op that has not retired."/>
            <mask value="1" name="IbsTaggedOpsRet: Number of Ops tagged by IBS that retired"/>
            <mask value="0" name="IbsTaggedOps: Number of Ops tagged by IBS"/>
            <description></description>
        </event>
        <event name="Retired Fused Branch Instructions" abbreviation="ExRetFusBrnchInst" value="1D0">
            <description>The number of fuse-branch instructions retired per cycle. The number of events logged per cycle can vary from 0-8.</description>
        </event>
    </source>
    <source unit="L2">
        <event name="Requests to L2 Group1" abbreviation="L2RequestG1" value="60">
            <mask value="7" name="RdBlkL: Data Cache Reads (including prefetch)"/>
            <mask value="6" name="RdBlkX: Data Cache Stores"/>
            <mask value="5" name="LsRdBlkC_S: Data Cache Shared Reads"/>
            <mask value="4" name="CacheableIcRead: Instruction Cache Reads"/>
            <mask value="3" name="ChangeToX: Data Cache State Change Requests"/>
            <mask value="2" name="PrefetchL2: Software Prefetch Assume core should also count these and allow the breakdown between hardware versus software and data versus instruction."/>
            <mask value="1" name="L2HwPf: L2 Prefetcher All prefetches accepted by L2 pipeline, hit or miss. Types of PF and L2 hit/miss broken out in a separate perfmon event."/>
            <mask value="0" name="Group2: Miscellaneous events covered in more detail by Core::X86::Pmc::Core::L2RequestG2 (PMCx061)."/>
            <description>All L2 Cache Requests (Breakdown 1 - Common).</description>
        </event>
        <event name="Requests to L2 Group2" abbreviation="L2RequestG2" value="61">
            <mask value="7" name="Group1: Miscellaneous events covered in more detail by Core::X86::Pmc::Core::L2RequestG1 (PMCx060). "/>
            <mask value="6" name="LsRdSized: Data cache read sized"/>
            <mask value="5" name="LsRdSizedNC: Data cache read sized non-cacheable"/>
            <mask value="4" name="IcRdSized: Instruction cache read sized"/>
            <mask value="3" name="IcRdSizedNC: Instruction cache read sized non-cacheable"/>
            <mask value="2" name="SmcInval: Self-modifying core invalidates"/>
            <mask value="1" name="BusLocksOriginator: Bus locks"/>
            <mask value="0" name="BusLocksResponses: Bus Lock Response"/>
            <description>All L2 Cache Requests (Breakdown 2 - Rare). </description>
        </event>
        <event name="L2 Latency" abbreviation="L2Latancy" value="62">
            <mask value="0" name="L2CyclesWaitingOnFills"/>
            <description>Total cycles spent waiting for L2 fills to complete from L3 or memory, divided by four. This may be used to calculate average latency by multiplying this count by four and then dividing by the total number of L2 fills (unit mask Core::X86::Pmc::Core::L2RequestG1 == FEh). Event counts are for both threads. To calculate average latency, the number of fills from both threads must be used.</description>
        </event>
        <event name="Core to L2 Cacheable Request Access Status" abbreviation="L2CacheReqStat" value="64">
            <mask value="7" name="LsRdBlkCS: Data Cache Shared Read Hit in L2"/>
            <mask value="6" name="LsRdBlkLHitX: Data Cache Read Hit in L2"/>
            <mask value="5" name="LsRdBlkLHitS: Data Cache Read Hit on Shared Line in L2"/>
            <mask value="4" name="LsRdBlkX: Data Cache Store or State Change Hit in L2"/>
            <mask value="3" name="LsRdBlkC: Data Cache Req Miss in L2 (all types)"/>
            <mask value="2" name="IcFillHitX: Instruction Cache Hit Modifiable Line in L2"/>
            <mask value="1" name="IcFillHitS: Instruction Cache Hit Clean Line in L2"/>
            <mask value="0" name="IcFillMiss: Instruction Cache Req Miss in L2"/>
            <description>L2 Cache Request Outcomes (not including L2 Prefetch).</description>
        </event>
        <event name="Cycles with fill pending from L2" abbreviation="L2FillPending" value="6D">
            <mask value="0" name="L2FillBusy"/>
            <description>Total cycles spent with one or more fill requests in flight from L2.</description>
        </event>
        <event name="L2 Prefetch Hit in L2" abbreviation="L2PfHitL2" value="70">
            <description></description>
        </event>
        <event name="L2 Prefetcher Hits in L3" abbreviation="L2PfMissL2HitL2" value="71">
            <description>Counts all L2 prefetches accepted by the L2 pipeline which miss the L2 cache and hit the L3.</description>
        </event>
        <event name="L2 Prefetcher Misses in L3" abbreviation="L2PfMissL2L3" value="72">
            <description>Counts all L2 prefetches accepted by the L2 pipeline which miss the L2 and the L3 caches.</description>
        </event>
    </source>
    <source unit="L3">
        <event name="L3 Cache Accesses" abbreviation="L3RequestG1" value="B001">
            <mask value="7" name="Caching: L3 cache accesses"/>
            <description></description>
        </event>
        <event name="All L3 Cache Requests" abbreviation="L3LookupState" value="B004">
            <mask value="7" name="AllL3ReqTyps: All L3 Request Types"/>
            <mask value="6" name="AllL3ReqTyps: All L3 Request Types"/>
            <mask value="5" name="AllL3ReqTyps: All L3 Request Types"/>
            <mask value="4" name="AllL3ReqTyps: All L3 Request Types"/>
            <mask value="3" name="AllL3ReqTyps: All L3 Request Types"/>
            <mask value="2" name="AllL3ReqTyps: All L3 Request Types"/>
            <mask value="1" name="AllL3ReqTyps: All L3 Request Types"/>
            <mask value="0" name="AllL3ReqTyps: All L3 Request Types"/>
            <description></description>
        </event>
        <event name="L3 Miss" abbreviation="L3CombClstrState" value="B006">
            <mask value="0" name="RequestMiss: L3 cache miss"/>
            <description>L3 Cache Request Outcomes.</description>
        </event>
        <event name="L3 Cache Miss Latency" abbreviation="XiSysFillLatency" value="B090">
            <description>Ignores SliceMask and ThreadMask.
Total cycles for all transactions divided by 16.</description>
        </event>
        <event name="L3 Misses by Request Type" abbreviation="XiCcxSdpReq1" value="B09A">
            <description>Ignores SliceMask and ThreadMask.</description>
        </event>
    </source>
    <source unit="IBS">
        <event name="All IBS fetch samples" abbreviation="IBS fetch" value="F000">
            <description>The number of all IBS fetch samples. This derived event counts the number of all IBS fetch samples that were collected including IBS-killed fetch samples.</description>
        </event>
        <event name="IBS fetch killed" abbreviation="IBS fetch killed" value="F001">
            <description>The number of IBS sampled fetches that were killed fetches. A fetch operation is killed if the fetch did not reach ITLB or IC access. The number of killed fetch samples is not generally useful for analysis and are filtered out in other derived IBS fetch events (except Event Select 0xF000 which counts all IBS fetch samples including IBS killed fetch samples.)</description>
        </event>
        <event name="IBS fetch attempted" abbreviation="IBS fetch attempt" value="F002">
            <description>The number of IBS sampled fetches that were not killed fetch attempts. This derived event measures the number of useful fetch attempts and does not include the number of IBS killed fetch samples. This event should be used to compute ratios such as the ratio of IBS fetch IC misses to attempted fetches. The number of attempted fetches should equal the sum of the number of completed fetches and the number of aborted fetches.</description>
        </event>
        <event name="IBS fetch completed" abbreviation="IBS fetch comp" value="F003">
            <description>The number of IBS sampled fetches that completed. A fetch is completed if the attempted fetch delivers instruction data to the instruction decoder. Although the instruction data was delivered, it may still not be used (e.g., the instruction data may have been on the "wrong path" of an incorrectly predicted branch.)</description>
        </event>
        <event name="IBS fetch aborted" abbreviation="IBS fetch abort" value="F004">
            <description>The number of IBS sampled fetches that aborted. An attempted fetch is aborted if it did not complete and deliver instruction data to the decoder. An attempted fetch may abort at any point in the process of fetching instruction data. An abort may be due to a branch redirection as the result of a mispredicted branch. The number of IBS aborted fetch samples is a lower bound on the amount of unsuccessful, speculative fetch activity. It is a lower bound since the instruction data delivered by completed fetches may not be used.</description>
        </event>
        <event name="IBS ITLB hit" abbreviation="IBS L1 ITLB hit" value="F005">
            <description>The number of IBS attempted fetch samples where the fetch operation initially hit in the L1 ITLB (Instruction Translation Lookaside Buffer).</description>
        </event>
        <event name="IBS L1 ITLB misses (and L2 ITLB hits)" abbreviation="IBS ITLB L1M L2H" value="F006">
            <description>The number of IBS attempted fetch samples where the fetch operation initially missed in the L1 ITLB and hit in the L2 ITLB.</description>
        </event>
        <event name="IBS L1 L2 ITLB miss" abbreviation="IBS ITLB L1M L2M" value="F007">
            <description>The number of IBS attempted fetch samples where the fetch operation initially missed in both the L1 ITLB and the L2 ITLB.</description>
        </event>
        <event name="IBS instruction cache misses" abbreviation="IBS IC miss" value="F008">
            <description>The number of IBS attempted fetch samples where the fetch operation initially missed in the IC (instruction cache).</description>
        </event>
        <event name="IBS instruction cache hit" abbreviation="IBS IC hit" value="F009">
            <description>The number of IBS attempted fetch samples where the fetch operation initially hit in the IC.</description>
        </event>
        <event name="IBS 4K page translation" abbreviation="IBS 4K page" value="F00A">
            <description>The number of IBS attempted fetch samples where the fetch operation produced a valid physical address (i.e., address translation completed successfully) and used a 4-KByte page entry in the L1 ITLB.</description>
        </event>
        <event name="IBS 2M page translation" abbreviation="IBS 2M page" value="F00B">
            <description>The number of IBS attempted fetch samples where the fetch operation produced a valid physical address (i.e., address translation completed successfully) and used a 2-MByte page entry in the L1 ITLB.</description>
        </event>
        <event name="IBS fetch latency" abbreviation="IBS fetch lat" value="F00E">
            <description>The total latency of all IBS attempted fetch samples. Divide the total IBS fetch latency by the number of IBS attempted fetch samples to obtain the average latency of the attempted fetches that were sampled.</description>
        </event>
        <event name="IBS fetch L2 cache miss" abbreviation="IBS fetch l2c miss" value="F00F">
            <description>The instruction fetch missed in the L2 Cache.</description>
        </event>
        <event name="IBS ITLB refill latency" abbreviation="IBS itlb refill lat" value="F010">
            <description>The number of cycles when the fetch engine is stalled for an ITLB reload for the sampled fetch. If there is no reload, the latency will be 0.</description>
        </event>
        <event name="All IBS op samples" abbreviation="IBS all ops" value="F100">
            <description>The number of all IBS op samples that were collected. These op samples may be branch ops, resync ops, ops that perform load/store operations, or undifferentiated ops (e.g., those ops that perform arithmetic operations, logical operations, etc.). IBS collects data for retired ops. No data is collected for ops that are aborted due to pipeline flushes, etc. Thus, all sampled ops are architecturally significant and contribute to the successful forward progress of executing programs.</description>
        </event>
        <event name="IBS tag-to-retire cycles" abbreviation="IBS tag-to-ret" value="F101">
            <description>The total number of tag-to-retire cycles across all IBS op samples. The tag-to-retire time of an op is the number of cycles from when the op was tagged (selected for sampling) to when the op retired.</description>
        </event>
        <event name="IBS completion-to-retire cycles" abbreviation="IBS comp-to-ret" value="F102">
            <description>The total number of completion-to-retire cycles across all IBS op samples. The completion-to-retire time of an op is the number of cycles from when the op completed to when the op retired.</description>
        </event>
        <event name="IBS branch op" abbreviation="IBS BR" value="F103">
            <description>The number of IBS retired branch op samples. A branch operation is a change in program control flow and includes unconditional and conditional branches, subroutine calls and subroutine returns. Branch ops are used to implement AMD64 branch semantics.</description>
        </event>
        <event name="IBS mispredicted branch op" abbreviation="IBS misp BR" value="F104">
            <description>The number of IBS samples for retired branch operations that were mispredicted. This event should be used to compute the ratio of mispredicted branch operations to all branch operations.</description>
        </event>
        <event name="IBS taken branch op" abbreviation="IBS taken BR" value="F105">
            <description>The number of IBS samples for retired branch operations that were taken branches.</description>
        </event>
        <event name="IBS mispredicted taken branch op" abbreviation="IBS misp taken BR" value="F106">
            <description>The number of IBS samples for retired branch operations that were mispredicted taken branches.</description>
        </event>
        <event name="IBS return op" abbreviation="IBS RET" value="F107">
            <description>The number of IBS retired branch op samples where the operation was a subroutine return. These samples are a subset of all IBS retired branch op samples.</description>
        </event>
        <event name="IBS mispredicted return op" abbreviation="IBS misp RET" value="F108">
            <description>The number of IBS retired branch op samples where the operation was a mispredicted subroutine return. This event should be used to compute the ratio of mispredicted returns to all subroutine returns.</description>
        </event>
        <event name="IBS resync op" abbreviation="IBS resync" value="F109">
            <description>The number of IBS resync op samples. A resync op is only found in certain microcoded AMD64 instructions and causes a complete pipeline flush.</description>
        </event>
        <event name="IBS all load store ops" abbreviation="IBS load/store" value="F200">
            <description>The number of IBS op samples for ops that perform either a load and/or store operation. An AMD64 instruction may be translated into one ("single fastpath"), two ("double fastpath"), or several ("vector path") ops. Each op may perform a load operation, a store operation or both a load and store operation (each to the same address). Some op samples attributed to an AMD64 instruction may perform a load/store operation while other op samples attributed to the same instruction may not. Further, some branch instructions perform load/store operations. Thus, a mix of op sample types may be attributed to a single AMD64 instruction depending upon the ops that are issued from the AMD64 instruction and the op types.</description>
        </event>
        <event name="IBS load ops" abbreviation="IBS load" value="F201">
            <description>The number of IBS op samples for ops that perform a load operation.</description>
        </event>
        <event name="IBS store ops" abbreviation="IBS store" value="F202">
            <description>The number of IBS op samples for ops that perform a store operation.</description>
        </event>
        <event name="IBS L1 DTLB hit" abbreviation="IBS L1 DTLB hit" value="F203">
            <description>The number of IBS op samples where either a load or store operation initially hit in the L1 DTLB (data translation lookaside buffer).</description>
        </event>
        <event name="IBS L1 DTLB misses L2 hits" abbreviation="IBS DTLB L1M L2H" value="F204">
            <description>The number of IBS op samples where either a load or store operation initially missed in the L1 DTLB and hit in the L2 DTLB.</description>
        </event>
        <event name="IBS L1 and L2 DTLB misses" abbreviation="IBS DTLB L1M L2M" value="F205">
            <description>The number of IBS op samples where either a load or store operation initially missed in both the L1 DTLB and the L2 DTLB.</description>
        </event>
        <event name="IBS data cache misses" abbreviation="IBS DC miss" value="F206">
            <description>The number of IBS op samples where either a load or store operation initially missed in the data cache (DC).</description>
        </event>
        <event name="IBS data cache hits" abbreviation="IBS DC hit" value="F207">
            <description>The number of IBS op samples where either a load or store operation initially hit in the data cache (DC).</description>
        </event>
        <event name="IBS misaligned data access" abbreviation="IBS misalign acc" value="F208">
            <description>The number of IBS op samples where either a load or store operation caused a misaligned access (i.e., the load or store operation crossed a 128-bit boundary).</description>
        </event>
        <event name="IBS bank conflict on load op" abbreviation="IBS bank conf load" value="F209">
            <description>The number of IBS op samples where either a load or store operation caused a bank conflict with a load operation.</description>
        </event>
        <event name="IBS bank conflict on store op" abbreviation="IBS bank conf store" value="F20A">
            <description>The number of IBS op samples where either a load or store operation caused a bank conflict with a store operation.</description>
        </event>
        <event name="IBS store-to-load forwarded" abbreviation="IBS forwarded" value="F20B">
            <description>The number of IBS op samples where data for a load operation was forwarded from a store operation.</description>
        </event>
        <event name="IBS store-to-load cancelled" abbreviation="IBS STLF cancelled" value="F20C">
            <description>The number of IBS op samples where data forwarding to a load operation from a store was cancelled.</description>
        </event>
        <event name="IBS UC memory access" abbreviation="IBS UC mem acc" value="F20D">
            <description>The number of IBS op samples where a load or store operation accessed uncacheable (UC) memory.</description>
        </event>
        <event name="IBS WC memory access" abbreviation="IBS WC mem acc" value="F20E">
            <description>The number of IBS op samples where a load or store operation accessed write combining (WC) memory.</description>
        </event>
        <event name="IBS locked operation" abbreviation="IBS locked op" value="F20F">
            <description>The number of IBS op samples where a load or store operation was a locked operation.</description>
        </event>
        <event name="IBS MAB hit" abbreviation="IBS MAB hit" value="F210">
            <description>The number of IBS op samples where a load or store operation hit an already allocated entry in the Miss Address Buffer (MAB).</description>
        </event>
        <event name="IBS L1 DTLB 4K page" abbreviation="IBS L1 DTLB 4K" value="F211">
            <description>The number of IBS op samples where a load or store operation produced a valid linear (virtual) address and a 4-KByte page entry in the L1 DTLB was used for address translation.</description>
        </event>
        <event name="IBS L1 DTLB 2M page" abbreviation="IBS L1 DTLB 2M" value="F212">
            <description>The number of IBS op samples where a load or store operation produced a valid linear (virtual) address and a 2-MByte page entry in the L1 DTLB was used for address translation.</description>
        </event>
        <event name="IBS L1 DTLB 1G page" abbreviation="IBS L1 DTLB 1G" value="F213">
            <description>The number of IBS op samples where a load or store operation produced a valid linear (virtual) address and a 1-GByte page entry in the L1 DTLB was used for address translation.</description>
        </event>
        <event name="IBS L2 DTLB 4K page" abbreviation="IBS L2 DTLB 4K" value="F215">
            <description>The number of IBS op samples where a load or store operation produced a valid linear (virtual) address, hit the L2 DTLB, and used a 4 KByte page entry for address translation.</description>
        </event>
        <event name="IBS L2 DTLB 2M page" abbreviation="IBS L2 DTLB 2M" value="F216">
            <description>The number of IBS op samples where a load or store operation produced a valid linear (virtual) address, hit the L2 DTLB, and used a 2-MByte page entry for address translation.</description>
        </event>
        <event name="IBS L2 DTLB 1G page" abbreviation="IBS L2 DTLB 1G" value="F217">
            <description>The number of IBS op samples where a load or store operation produced a valid linear (virtual) address, hit the L2 DTLB, and used a 1-GByte page entry for address translation.</description>
        </event>
        <event name="IBS data cache miss load latency" abbreviation="IBS DC miss lat" value="F219">
            <description>The total DC miss load latency (in processor cycles) across all IBS op samples that performed a load operation and missed in the data cache. The miss latency is the number of clock cycles from when the data cache miss was detected to when data was delivered to the core. Divide the total DC miss load latency by the number of data cache misses to obtain the average DC miss load latency.</description>
        </event>
        <event name="IBS load resync" abbreviation="IBS load resync" value="F21C">
            <description>Load Resync.</description>
        </event>
        <event name="IBS Northbridge local" abbreviation="IBS NB local" value="F240">
            <description>The number of IBS op samples where a load operation was serviced from the local processor. Northbridge IBS data is only valid for load operations that miss in both the L1 data cache and the L2 data cache. If a load operation crosses a cache line boundary, then the IBS data reflects the access to the lower cache line.</description>
        </event>
        <event name="IBS Northbridge remote" abbreviation="IBS NB remote" value="F241">
            <description>The number of IBS op samples where a load operation was serviced from a remote processor.</description>
        </event>
        <event name="IBS Northbridge local L3" abbreviation="IBS NB local L3" value="F242">
            <description>The number of IBS op samples where a load operation was serviced by the local L3 cache.</description>
        </event>
        <event name="IBS Northbridge local core L1 or L2 cache" abbreviation="IBS NB local cache" value="F243">
            <description>The number of IBS op samples where a load operation was serviced by a cache (L1 data cache or L2 cache) belonging to a local core which is a sibling of the core making the memory request.</description>
        </event>
        <event name="IBS Northbridge local core L1, L2, L3 cache" abbreviation="IBS NB remote cache" value="F244">
            <description>The number of IBS op samples where a load operation was serviced by a remote L1 data cache, L2 cache or L3 cache after traversing one or more coherent HyperTransport links.</description>
        </event>
        <event name="IBS Northbridge local DRAM" abbreviation="IBS NB local DRAM" value="F245">
            <description>The number of IBS op samples where a load operation was serviced by local system memory (local DRAM via the memory controller).</description>
        </event>
        <event name="IBS Northbridge remote DRAM" abbreviation="IBS NB remote DRAM" value="F246">
            <description>The number of IBS op samples where a load operation was serviced by remote system memory (after traversing one or more coherent HyperTransport links and through a remote memory controller).</description>
        </event>
        <event name="IBS Northbridge local APIC MMIO Config PCI" abbreviation="IBS NB local other" value="F247">
            <description>The number of IBS op samples where a load operation was serviced from local MMIO, configuration or PCI space, or from the local APIC.</description>
        </event>
        <event name="IBS Northbridge remote APIC MMIO Config PCI" abbreviation="IBS NB remote other" value="F248">
            <description>The number of IBS op samples where a load operation was serviced from remote MMIO, configuration or PCI space.</description>
        </event>
        <event name="IBS Northbridge cache modified state" abbreviation="IBS NB cache Modified" value="F249">
            <description>The number of IBS op samples where a load operation was serviced from local or remote cache, and the cache hit state was the Modified (M) state.</description>
        </event>
        <event name="IBS Northbridge cache owned state" abbreviation="IBS NB cache Owned" value="F24A">
            <description>The number of IBS op samples where a load operation was serviced from local or remote cache, and the cache hit state was the Owned (O) state.</description>
        </event>
        <event name="IBS Northbridge local cache latency" abbreviation="IBS NB local lat" value="F24B">
            <description>The total data cache miss latency (in processor cycles) for load operations that were serviced by the local processor.</description>
        </event>
        <event name="IBS Northbridge remote cache latency" abbreviation="IBS NB remote lat" value="F24C">
            <description>The total data cache miss latency (in processor cycles) for load operations that were serviced by a remote processor.</description>
        </event>
    </source>
    <source unit="Power">
        <event name="Energy" abbreviation="Energy" value="E200">
            <description>Energy Consumption.</description>
        </event>
    </source>
</cpu_events>
